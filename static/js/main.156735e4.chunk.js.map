{"version":3,"sources":["logo.svg","components/FormBox.js","components/InputFormula.js","components/LoopButton.js","components/InfoBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","body","Textt","h4","FormBox","props","text","eleArray","require","elements","InputForms","input","InputForm","state","value","element","answer","handleChange","bind","handleSubmit","event","this","setState","target","e","console","log","stringing","stringArr","replace","trim","split","ans","i","length","symbol","push","atomic_mass","reduce","a","b","name","preventDefault","onSubmit","id","type","onChange","placeholder","React","Component","InfBox","InfoBox","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2+5GAAAA,EAAOC,QAAU,IAA0B,kC,gdCGxBC,IAAOC,KAAV,KAAhB,IAMMC,EAAQF,IAAOG,GAAV,KAcIC,MARf,SAAiBC,GACb,OACI,oCACI,kBAACH,EAAD,KAAQG,EAAMC,Q,oOCd1B,IACMC,EADeC,EAAQ,IACCC,SAIxBC,EAAaV,IAAOW,MAAV,KAiFDC,E,YAvEX,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CACXC,MAAO,GACPC,QAAS,GACTC,OAAQ,IAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,mHAYFE,G,+FACZC,KAAKC,SAAS,CAACR,MAAOM,EAAMG,OAAOT,Q,OAKxC,IAAQU,KAJRC,QAAQC,IAAIL,KAAKR,MAAMC,OACnBa,EAAYN,KAAKR,MAAMC,MACvBc,EAAaD,EAAUE,QAAQ,WAAY,OAAOC,OAAQC,MAAM,KAChEC,EAAM,GACGzB,EACX,IAAQ0B,EAAI,EAAIA,EAAIL,EAAUM,OAASD,IACrCR,QAAQC,IAAIE,GACTA,EAAUK,KAAO1B,EAASiB,GAAGW,SAC9BH,EAAII,KAAK7B,EAASiB,GAAGa,aACrBhB,KAAKC,SAAS,CAACP,QAASiB,EAAIM,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,M,4IAQxD,IAAI,IAAIhB,KAAKjB,EACXkB,QAAQC,IAAInB,EAASiB,GAAGiB,Q,mCAafrB,GACXA,EAAMsB,iBACNjB,QAAQC,IAAIL,KAAKR,MAAMG,U,+BAIvB,OACE,0BAAM2B,SAAUtB,KAAKF,cACrB,6BACI,8BACI,yDACC,kBAACT,EAAD,CAAYkC,GAAG,eAAeC,KAAK,OAAOJ,KAAK,UAAU3B,MAAOO,KAAKR,MAAMC,MAAOgC,SAAUzB,KAAKJ,aAAc8B,YAAY,qBAC3H,kBAAC,EAAD,CAASzC,KAAMe,KAAKR,MAAME,iB,GA1DnBiC,IAAMC,WCfxB1C,EADeC,EAAQ,IACCC,SAGPuC,IAAMC,U,4MCH7B,IAAMC,EAASlD,IAAOC,KAAV,KAmBGkD,MAXf,SAAiB9C,GACb,OACI,6BACI,kBAAC6C,EAAD,KACA,0CACA,0HACA,sECEGE,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.156735e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst background = styled.body `\r\n    background-color: green;\r\n    color: green;\r\n    text-color: blue;\r\n`\r\n\r\nconst Textt = styled.h4 `\r\n    word-wrap: break-word;\r\n    overflow:hidden;\r\n\r\n`\r\n\r\nfunction FormBox(props) {\r\n    return(\r\n        <background>\r\n            <Textt>{props.text}</Textt>\r\n        </background>\r\n    );\r\n}\r\n\r\nexport default FormBox;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport FormBox from \"./FormBox\";\r\n\r\nconst PeriodicJSON = require('../PeriodicTableJSON.json');\r\nconst eleArray = PeriodicJSON.elements\r\n\r\n\r\n\r\nconst InputForms = styled.input `\r\n    border-style: inset;\r\n    border-width: 15px;\r\n    border-color: green;\r\n    text-align: center;\r\n    background-color: 336600;\r\n    text-color: white;\r\n`\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        value: '',\r\n        element: '',\r\n        answer: ''\r\n    };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n  async handleChange(event) {\r\n   await this.setState({value: event.target.value});\r\n    console.log(this.state.value);\r\n    let stringing = this.state.value;\r\n    let stringArr = (stringing.replace(/([A-Z])/g, ' $1').trim()).split(\" \");\r\n    let ans = [];\r\n    for(let e in eleArray) {\r\n      for(let i = 0 ; i < stringArr.length ; i++) {\r\n        console.log(stringArr);\r\n        if(stringArr[i] === eleArray[e].symbol) {\r\n          ans.push(eleArray[e].atomic_mass);\r\n          this.setState({element: ans.reduce((a, b) => a + b, 0)});\r\n        } else {\r\n        }\r\n      }\r\n    }\r\n    }\r\n\r\n    calculateMol() {\r\n      for(let e in eleArray) {\r\n        console.log(eleArray[e].name);\r\n      /*  if(eleArray[e].symbol === this.state.value) {\r\n          this.setState({\r\n            value:  eleArray[e].atomic_mass\r\n          });\r\n        }\r\n        */\r\n    }\r\n    }\r\n\r\n\r\n    \r\n  \r\n    handleSubmit(event) {\r\n      event.preventDefault();\r\n      console.log(this.state.answer);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n            <form>\r\n                <h1>Grams Per Mole Calculator</h1>\r\n                 <InputForms id=\"InputFormVal\" type=\"text\" name=\"Formula\" value={this.state.value} onChange={this.handleChange} placeholder=\"Chemical Formula\" /> \r\n                 <FormBox text={this.state.element} />\r\n             </form>\r\n        </div>\r\n        </form>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n\r\n    \r\n\r\n\r\n\r\nexport default InputForm;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nconst PeriodicJSON = require('../PeriodicTableJSON.json');\r\nconst eleArray = PeriodicJSON.elements\r\n\r\n\r\nclass TestLoop extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        value: ''\r\n    };\r\n}\r\n  \r\ngoThroughEle() {\r\n    for(let e in eleArray) {\r\n        console.log(eleArray[e].name);\r\n    }\r\n  }\r\n\r\n  test() {\r\n      console.log(\"hello World\");\r\n  }\r\n\r\nrender() {\r\n    return (\r\n        <div>\r\n            <button onClick={this.goThroughEle}></button>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TestLoop;","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst InfBox = styled.body `\r\n    border-style: inset;\r\n    border-width: 8px;\r\n    border-color: green;\r\n    text-align: center;\r\n    background-color: #006600;\r\n`\r\n\r\nfunction InfoBox(props) {\r\n    return(\r\n        <div>\r\n            <InfBox>\r\n            <h4>How To Use</h4>\r\n            <h6>Just enter the element you want to use: ex NH4. It will give you the grams per mole ratio.</h6>\r\n            <p>Ex: NH4 (NHHHH) - 18.039 grams / mol</p>\r\n            </InfBox>\r\n        </div>\r\n    );\r\n}\r\nexport default InfoBox;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport InputForm from './components/InputFormula';\nimport LoopButton from './components/LoopButton';\nimport InfoBox from './components/InfoBox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InputForm />\n        <InfoBox></InfoBox>\n      </header>   \n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}